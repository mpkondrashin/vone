// Code generated by enum (github.com/mpkondrashin/enum) using following command:
// enum -package=vone -type=ErrorCode -names=AccessDenied,BadRequest,ConditionNotMet,InternalServerError,InvalidCredentials,NotFound,ParameterNotAccepted,RequestEntityTooLarge,TooManyRequests,Unsupported
// DO NOT EDIT!

package vone

import (
    "encoding/json"
    "errors"
    "fmt"
    "strconv"
    "strings"
)

type ErrorCode int

const (
    ErrorCodeAccessDenied          ErrorCode = iota
    ErrorCodeBadRequest            ErrorCode = iota
    ErrorCodeConditionNotMet       ErrorCode = iota
    ErrorCodeInternalServerError   ErrorCode = iota
    ErrorCodeInvalidCredentials    ErrorCode = iota
    ErrorCodeNotFound              ErrorCode = iota
    ErrorCodeParameterNotAccepted  ErrorCode = iota
    ErrorCodeRequestEntityTooLarge ErrorCode = iota
    ErrorCodeTooManyRequests       ErrorCode = iota
    ErrorCodeUnsupported           ErrorCode = iota
)


// String - return string representation for ErrorCode value
func (v ErrorCode)String() string {
    s, ok := map[ErrorCode]string {
         ErrorCodeAccessDenied:          "AccessDenied",
         ErrorCodeBadRequest:            "BadRequest",
         ErrorCodeConditionNotMet:       "ConditionNotMet",
         ErrorCodeInternalServerError:   "InternalServerError",
         ErrorCodeInvalidCredentials:    "InvalidCredentials",
         ErrorCodeNotFound:              "NotFound",
         ErrorCodeParameterNotAccepted:  "ParameterNotAccepted",
         ErrorCodeRequestEntityTooLarge: "RequestEntityTooLarge",
         ErrorCodeTooManyRequests:       "TooManyRequests",
         ErrorCodeUnsupported:           "Unsupported",
    }[v]
    if ok {
        return s
    }
    return "ErrorCode(" + strconv.FormatInt(int64(v), 10) + ")"
}

// ErrUnknownErrorCode - will be returned wrapped when parsing string
// containing unrecognized value.
var ErrUnknownErrorCode = errors.New("unknown ErrorCode")


var mapErrorCodeFromString = map[string]ErrorCode{
    "accessdenied":    ErrorCodeAccessDenied,
    "badrequest":    ErrorCodeBadRequest,
    "conditionnotmet":    ErrorCodeConditionNotMet,
    "internalservererror":    ErrorCodeInternalServerError,
    "invalidcredentials":    ErrorCodeInvalidCredentials,
    "notfound":    ErrorCodeNotFound,
    "parameternotaccepted":    ErrorCodeParameterNotAccepted,
    "requestentitytoolarge":    ErrorCodeRequestEntityTooLarge,
    "toomanyrequests":    ErrorCodeTooManyRequests,
    "unsupported":    ErrorCodeUnsupported,
}

// UnmarshalJSON implements the Unmarshaler interface of the json package for ErrorCode.
func (s *ErrorCode) UnmarshalJSON(data []byte) error {
    var v string
    if err := json.Unmarshal(data, &v); err != nil {
        return err
    }
    result, ok := mapErrorCodeFromString[strings.ToLower(v)]
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownErrorCode, v)
    }
    *s = result
    return nil
}

// MarshalJSON implements the Marshaler interface of the json package for ErrorCode.
func (s ErrorCode) MarshalJSON() ([]byte, error) {
    return []byte(fmt.Sprintf("\"%v\"", s)), nil
}

// UnmarshalYAML implements the Unmarshaler interface of the yaml.v3 package for ErrorCode.
func (s *ErrorCode) UnmarshalYAML(unmarshal func(interface{}) error) error {
    var v string
    if err := unmarshal(&v); err != nil {
        return err
    }
    result, ok := mapErrorCodeFromString[strings.ToLower(v)]  
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownErrorCode, v)
    }
    *s = result
    return nil
}
