// Code generated by enum (github.com/mpkondrashin/enum) using following command:
// enum -package=vone -type=RiskLevel -names=high,medium,low,noRisk
// DO NOT EDIT!

package vone

import (
    "encoding/json"
    "errors"
    "fmt"
    "strconv"
    "strings"
)

type RiskLevel int

const (
    RiskLevelHigh   RiskLevel = iota
    RiskLevelMedium RiskLevel = iota
    RiskLevelLow    RiskLevel = iota
    RiskLevelNoRisk RiskLevel = iota
)



// MapRiskLevelToString - map RiskLevel to string
var MapRiskLevelToString = map[RiskLevel]string {
    RiskLevelHigh:   "high",
    RiskLevelMedium: "medium",
    RiskLevelLow:    "low",
    RiskLevelNoRisk: "noRisk",
}

// String - return string representation for RiskLevel value
func (v RiskLevel)String() string {
    s, ok := MapRiskLevelToString[v]
    if ok {
        return s
    }
    return "RiskLevel(" + strconv.FormatInt(int64(v), 10) + ")"
}

// ErrUnknownRiskLevel - will be returned wrapped when parsing string
// containing unrecognized value.
var ErrUnknownRiskLevel = errors.New("unknown RiskLevel")

 // MapRiskLevelFromString - map string to RiskLevel value
var MapRiskLevelFromString = map[string]RiskLevel{
    "high":    RiskLevelHigh,
    "medium":    RiskLevelMedium,
    "low":    RiskLevelLow,
    "norisk":    RiskLevelNoRisk,
}

// UnmarshalJSON implements the Unmarshaler interface of the json package for RiskLevel.
func (s *RiskLevel) UnmarshalJSON(data []byte) error {
    var v string
    if err := json.Unmarshal(data, &v); err != nil {
        return err
    }
    result, ok := MapRiskLevelFromString[strings.ToLower(v)]
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownRiskLevel, v)
    }
    *s = result
    return nil
}

// MarshalJSON implements the Marshaler interface of the json package for RiskLevel.
func (s RiskLevel) MarshalJSON() ([]byte, error) {
    return []byte(fmt.Sprintf("\"%v\"", s)), nil
}

// UnmarshalYAML implements the Unmarshaler interface of the yaml.v3 package for RiskLevel.
func (s *RiskLevel) UnmarshalYAML(unmarshal func(interface{}) error) error {
    var v string
    if err := unmarshal(&v); err != nil {
        return err
    }
    result, ok := MapRiskLevelFromString[strings.ToLower(v)]  
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownRiskLevel, v)
    }
    *s = result
    return nil
}
