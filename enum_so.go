// Code generated by enum (github.com/mpkondrashin/enum) using following command:
// enum -package=vone -type=SO -names=Domain,IP,SenderMailAddress,FileSha1,FileSha256
// DO NOT EDIT!

package vone

import (
    "encoding/json"
    "errors"
    "fmt"
    "strconv"
    "strings"
)

type SO int

const (
    SODomain            SO = iota
    SOIP                SO = iota
    SOSenderMailAddress SO = iota
    SOFileSha1          SO = iota
    SOFileSha256        SO = iota
)



// MapSOToString - map SO to string
var MapSOToString = map[SO]string {
    SODomain:            "Domain",
    SOIP:                "IP",
    SOSenderMailAddress: "SenderMailAddress",
    SOFileSha1:          "FileSha1",
    SOFileSha256:        "FileSha256",
}

// String - return string representation for SO value
func (v SO)String() string {
    s, ok := MapSOToString[v]
    if ok {
        return s
    }
    return "SO(" + strconv.FormatInt(int64(v), 10) + ")"
}

// ErrUnknownSO - will be returned wrapped when parsing string
// containing unrecognized value.
var ErrUnknownSO = errors.New("unknown SO")

 // MapSOFromString - map string to SO value
var MapSOFromString = map[string]SO{
    "domain":    SODomain,
    "ip":    SOIP,
    "sendermailaddress":    SOSenderMailAddress,
    "filesha1":    SOFileSha1,
    "filesha256":    SOFileSha256,
}

// UnmarshalJSON implements the Unmarshaler interface of the json package for SO.
func (s *SO) UnmarshalJSON(data []byte) error {
    var v string
    if err := json.Unmarshal(data, &v); err != nil {
        return err
    }
    result, ok := MapSOFromString[strings.ToLower(v)]
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownSO, v)
    }
    *s = result
    return nil
}

// MarshalJSON implements the Marshaler interface of the json package for SO.
func (s SO) MarshalJSON() ([]byte, error) {
    return []byte(fmt.Sprintf("\"%v\"", s)), nil
}

// UnmarshalYAML implements the Unmarshaler interface of the yaml.v3 package for SO.
func (s *SO) UnmarshalYAML(unmarshal func(interface{}) error) error {
    var v string
    if err := unmarshal(&v); err != nil {
        return err
    }
    result, ok := MapSOFromString[strings.ToLower(v)]  
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownSO, v)
    }
    *s = result
    return nil
}
